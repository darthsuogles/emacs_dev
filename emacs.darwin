#!/bin/bash

# We cannot set `pipefail` it won't launch the server
set -eux

# This version works with the homebrew build of emacs

# Uncomment to toggle the native brew version
emacs_root="$(brew --prefix emacs)"
# Uncomment to toggle the `cask` version
#emacs_root="/Applications"

emacs_server_pattern="Emacs.app/Contents/MacOS/Emacs"

emacs_server="${emacs_root}/${emacs_server_pattern}"
emacs_client="/usr/local/bin/emacsclient"

[[ -e "${emacs_server}" ]] && [[ -e "${emacs_client}" ]]

function must_use_emacs_server {
    for arg in ${@}; do
        if [[ "$arg" == "-batch" ]] || [[ "$arg" == "--batch" ]]; then
            echo "TRUE"; return
        fi
    done
    echo "FALSE"
}

if [[ $# -gt 1 ]]; then
    if [[ "TRUE" == "$(must_use_emacs_server $@)" ]]; then
	    echo "Emacs compiler mode with: $@"
	    $emacs_server "$@"
	    exit
    fi
fi

server_pid="$(ps aux | grep -v grep | grep -Ei "${emacs_server_pattern}" | awk '{print $2}')"
# Check if there is already an emacs process (has to be written like this)
if [[ ! -z "${server_pid}" ]]; then
    which osascript > /dev/null 2>&1 && \
	    osascript -e 'tell application "Emacs" to activate'
    # Get the number of all frames
    num_frames="$(${emacs_client} -e '(length (frame-list))')"
    if [[ ${num_frames} -lt 2 ]]; then
        # Create a new frame if we only have the minimized server frame
        args=-nc
    else
        # Just launch on the existing frame window
        args=-n
    fi
    exec "${emacs_client}" "${args}" --quiet --no-wait "$@" &
else
    echo "Initializing emacs server"
    # The option "--no-splash" has disappeared.
    #exec "${emacs_server}" --no-splash "$@" &
    exec "${emacs_server}" --quiet "$@" &
fi
